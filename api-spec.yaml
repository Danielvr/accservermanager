openapi: 3.0.0
info:
  description: REST API Spec for a ACC server manager backend.
  version: 0.0.1
  title: AC Competizione Server Manager - Backend
  license:
    name: Dont Be a Dick Public License
    url: https://dbad-license.org/
servers: 
- url: http://localhost:8000/v1
  description: Local development server
- url: http://accservermanager.grimsi.de/v1
  description: Production Server
tags:
- name: auth
  description: Authorization
- name: configs
  description: Manage server configurations
- name: instances
  description: Manage server instances
- name: results
  description: Access server instance results
- name: status
  description: Access to server instance metrics
paths:
  /login:
    post:
      summary: Authorize the client
      operationId: auth
      tags:
        - auth
      requestBody:
        description: A JSON object containing user credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        '200':
          description: a JWT token
          content:
            application/json:
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: []
  /configs:
    get:
      summary: List all configurations
      operationId: listConfigs
      tags:
        - configs
      parameters:
        - name: name
          in: query
          description: Filter by name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A array of configurations
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Configs"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a configuration
      operationId: createConfig
      tags:
        - configs
      requestBody:
        description: A JSON object containing the configuration
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        '201':
          description: the created configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Config"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /configs/{configId}:
    get:
      summary: Get a specific configuration
      operationId: getConfigById
      tags:
        - configs
      parameters:
        - name: configId
          in: path
          required: true
          description: The id of the configuration to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Config"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a configuration
      operationId: updateConfigById
      tags: 
        - configs
      parameters: 
        - name: configId
          in: path
          required: true
          description: The id of the configuration to retrieve
          schema:
            type: string
      requestBody:
        description: A JSON object containing the configuration
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        '201':
          description: the created configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Config"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a specific configuration
      operationId: deleteConfigById
      tags:
        - configs
      parameters:
        - name: configId
          in: path
          required: true
          description: The id of the configuration to delete
          schema:
            type: string
      responses:
        '204':
          description: Empty response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Auth:
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    Config:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Configs:
      type: array
      items:
        $ref: "#/components/schemas/Config"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - auth: []